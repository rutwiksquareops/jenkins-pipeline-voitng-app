pipeline {
    agent {
        kubernetes {
            label 'kaniko'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
                name: kaniko
            spec:
                restartPolicy: Never
                volumes:
                - name: kaniko-docker-secret
                  secret:
                    secretName: kaniko-secret
                containers:
                - name: kaniko
                  image: gcr.io/kaniko-project/executor:debug
                  command:
                  - /busybox/cat
                  tty: true
                  volumeMounts:
                  - name: kaniko-docker-secret
                    mountPath: /kaniko/.docker
            """
        }
    }

    environment {
        DOCKER_HUB_USER = 'rutwiksquareops'
        last_started_build_stage = ""
        def scannerHome = tool 'sonarqube-scanner'

    }

    stages {
        stage("Cloning the repo") {
            steps {
                echo "Cloning the app"
                container('kaniko') {
                    git branch: 'main', url: 'https://github.com/rutwiksquareops/jenkins-pipeline-voitng-app.git'                }
            }
        }

stage('Scan Code with Gitleaks and Generate Report') {
            steps {
                // Install and run gitleaks
                sh 'ls -a'
                sh 'curl -L -o gitleaks https://github.com/zricethezav/gitleaks/releases/download/v7.2.1/gitleaks-linux-amd64'
                sh 'chmod +x gitleaks'
                sh './gitleaks --path ./worker --report detect-secrets-report.json --format JSON'
                sh 'ls ./worker/'
                sh 'ls -a'
            }
        }

       /* stage('Check for Secrets') {
            steps {
                script {
                    def reportFile = readFile('detect-secrets-report.json')
                    if (reportFile.trim().isEmpty()) {
                        echo "No secrets detected. Pipeline continues."
                    } else {
                        error "Secrets detected in the code. Aborting the pipeline."
                    }
                }
            }
        } */
        
       /* stage("Sonarqube Analysis on github code of result service") {
        steps {
            withSonarQubeEnv('sonarqube-server') {
                sh 'dotnet tool install --global dotnet-sonarscanner'
                sh 'echo ${scannerHome}'
                sh "dotnet sonarscanner begin /k:"rutwik-voting" /d:sonar.host.url="https://sonarqube.ldc.squareops.in"  /d:sonar.login="787d42df1cafc20ae72083b2eaa99a836e7e1675""
                sh 'dotnet build'
                sh 'dotnet sonarscanner end /d:sonar.login="787d42df1cafc20ae72083b2eaa99a836e7e1675"'
            }
            sh 'echo SonarQube Quality gate'
            timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
            }
        }
    }*/


        stage("Build docker image") {
            steps {
                echo "Building the code"
                container('kaniko') {
                    // Use Kaniko to build the Docker image
                    echo 'Build Start'    
                   
                    sh "/kaniko/executor --dockerfile `pwd`/worker/Dockerfile --context=`pwd` --destination=${DOCKER_HUB_USER}/vote-app-worker:${BUILD_NUMBER} --no-push --oci-layout-path `pwd`/build/ --tarPath `pwd`/build/${DOCKER_HUB_USER}-${BUILD_NUMBER}.tar"
                }
                stash includes: 'build/*.tar', name: 'image'
            }
        }

        stage('Scan Docker Image') {
    //   when {    
    //   anyOf {
    //           expression { "${env.DEPLOYMENT_STAGE}" == 'main' }; 
    //           expression { "${env.DEPLOYMENT_STAGE}" == 'dev' };
    //           expression { "${env.DEPLOYMENT_STAGE}" == 'demo' };
    //           expression { "${env.DEPLOYMENT_STAGE}" == 'prod' };
    //           expression { "${env.DEPLOYMENT_STAGE}" == 'stg' }
    //         }
    //   } 
      agent {
        kubernetes {           
            containerTemplate {
              name 'trivy'
              image 'aquasec/trivy:0.35.0'
              command 'sleep'
              args 'infinity'
            }
        }
      }
      options { skipDefaultCheckout() }
      steps {
        container('trivy') {
           script {
              //last_started_build_stage = env.STAGE_NAME
              echo 'Scan with trivy'    
              unstash 'image'          
              sh '''
          apk add --update libzip-dev curl-dev
              apk add curl  && apk add jq
              curl -o html.tpl "https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl"
          trivy image --ignore-unfixed --format template --template "@html.tpl" -o scan-report.html --input build/${DOCKER_HUB_USER}-${BUILD_NUMBER}.tar
              trivy image --ignore-unfixed -f json -o scan-report.json --input build/${DOCKER_HUB_USER}-${BUILD_NUMBER}.tar
              '''
              echo 'archive scan report'
              archiveArtifacts artifacts: 'scan-report.json'
          archiveArtifacts artifacts: 'scan-report.html'
              echo 'Docker Image Vulnerability Scanning'
              high = sh (
                   script: 'cat scan-report.json | jq .Results[].Vulnerabilities[].Severity | grep HIGH | wc -l',
                   returnStdout: true
              ).trim()
              echo "High: ${high}"
             
             critical = sh (
                  script: 'cat scan-report.json | jq .Results[].Vulnerabilities[].Severity | grep CRITICAL | wc -l',
                   returnStdout: true
              ).trim()
              echo "Critical: ${critical}"             
           }
         }
      }
    }

         stage('Update Helm Chart and Push to Git') {
            agent {
                kubernetes {
                    label 'jenkinsrun'
                    defaultContainer 'builder'
                    yaml """
                    apiVersion: v1
                    kind: Pod
                    spec:
                      containers:
                      - name: builder
                        image: squareops/jenkins-build-agent:v3
                        securityContext:
                          privileged: true
                        volumeMounts:
                          - name: builder-storage
                            mountPath: /var/lib/docker
                      volumes:
                        - name: builder-storage
                          emptyDir: {}
                    """
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'USER_NAME', passwordVariable: 'PASSWORD')]) {
                        last_started_build_stage = env.STAGE_NAME
                        sh '''
                        git clone -b main https://github.com/rutwiksquareops/helm-voting.git
                        git config --global user.email rutwik@squreops.com
                        git config --global user.name rutwiksquareops
                        ls -la
                        pwd
                        cd helm-voting
                        ls -la
                        cd worker-chart
                        ls -la
                        yq e -i '.image.tag = "'$BUILD_NUMBER'"' values.yaml
                        git add .
                        git commit -m 'Docker Image version Update "'$JOB_NAME'"-"'$BUILD_NUMBER'"'
                        git push https://${USER_NAME}:${PASSWORD}@github.com/rutwiksquareops//helm-voting.git main
                        '''
                    }
                }
            }
        }
    }
}
